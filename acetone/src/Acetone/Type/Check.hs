{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE StandaloneDeriving #-}
{-# LANGUAGE TypeApplications #-}

-- |
-- Checking a compilation unit is a two-step process:
--
--  1. Extract the interface from the compilation unit. This finds all global
--     definitions and collects information about them.
--
--  2. Type check all value definitions. This uses the interface that was
--     extracted previously.
module Acetone.Type.Check
  ( -- * High-level
    checkAll

    -- * Checking
  , Check
  , runCheck
  , withLocation

    -- ** Interfaces
  , combineInterfaces
  , extractUnit
  , extractDef

    -- ** Units
  , checkUnit

    -- ** Type expressions
  , translateTypeExp

    -- ** Term expressions
  , checkTermExp
  , inferTermExp

    -- * Inference
  , Infer
  , runInfer

    -- ** Solving
  , solve
  , unify
  , unify'

    -- ** Environment
  , Œì (..)

    -- ** State
  , Œ£ (..)
  , freshUnknown
  , freshSkolem
  , instantiate
  , skolemize
  , constrain
  , resolve
  , purge

    -- * Errors
  , Œ®
  , Œ®' (..)
  , throwError

    -- * Optics
  , _Œ≥Values
  , _œÉNext
  , _œÉConstraints
  , _œÉResolveds
  ) where

import Acetone.Ast

import Acetone.Interface (Interface (..))
import Acetone.Type (Skolem (..), Type (..), Type', Unknown (..), hideUniverse, inUniverse)
import Acetone.Type.Constraint (Constraint (..))
import Control.Lens (Lens', (&), (?~), (^?), (%=), (?=), (<<+=), at, ix, lens, use)
import Control.Monad ((>=>), foldM)
import Control.Monad.Error.Class (MonadError)
import Control.Monad.Reader.Class (MonadReader)
import Control.Monad.Trans.Reader (ReaderT, runReaderT)
import Control.Monad.Trans.State (StateT (..), evalStateT)
import Data.Foldable (for_, traverse_)
import Data.Function (fix)
import Data.Map (Map)
import Data.Word (Word64)
import GHC.TypeLits (KnownNat)

import qualified Acetone.Interface as Interface
import qualified Control.Monad.Error.Class as Error
import qualified Control.Monad.Reader.Class as Reader
import qualified Data.Map as Map

--------------------------------------------------------------------------------
-- High-level

checkAll :: Unit -> Either Œ® ()
checkAll ds = runCheck $ do
  i <- extractUnit ds
  checkUnit i ds

--------------------------------------------------------------------------------
-- Check

type Check =
  ReaderT Location (Either Œ®)

runCheck :: Check a -> Either Œ® a
runCheck a = runReaderT a (Location "" 0 0)

withLocation :: (MonadReader Location f) => Location -> f a -> f a
withLocation = Reader.local . const

--------------------------------------------------------------------------------
-- Interfaces

combineInterfaces :: Interface -> Interface -> Check Interface
combineInterfaces (Interface a b) (Interface c d) =
  -- TODO: Throw error when there are duplicate definitions.
  pure $ Interface (a <> c) (b <> d)

-- |
-- Extract the interface from a unit.
extractUnit :: Unit -> Check Interface
extractUnit = traverse extractDef >=> foldM combineInterfaces Interface.empty

-- |
-- Extract the interface from a definition.
extractDef :: Def -> Check Interface

extractDef (LocationDef l d) =
  withLocation l (extractDef d)

extractDef (TypeDef n ps Œ∫ œÑ) =
  let ps' = fmap (fmap translateTypeExp) ps in
  let Œ∫'  = translateTypeExp Œ∫ in
  let œÑ'  = translateTypeExp œÑ in
  pure $ Interface { interfaceTypes  = Map.singleton n (ps', Œ∫', œÑ')
                   , interfaceValues = Map.empty }

extractDef (SignatureDef n œÑ) =
  pure $ Interface { interfaceTypes  = Map.empty
                   , interfaceValues = Map.singleton n (translateTypeExp œÑ) }

extractDef ValueDef{} =
  pure Interface.empty

--------------------------------------------------------------------------------
-- Units

-- |
-- Given the interface, type check a unit.
checkUnit :: Interface -> Unit -> Check ()
checkUnit i ds =
  for_ ds $ fix $ \f -> \case
    LocationDef l d -> withLocation l (f d)
    TypeDef{}       -> pure ()
    SignatureDef{}  -> pure ()
    ValueDef x e    ->
      case interfaceValues i ^? ix x of
        Nothing -> throwError $ UnknownValue x
        Just œÑ  -> checkTermExp i œÑ e

--------------------------------------------------------------------------------
-- Type expressions

-- |
-- Given a type expression, return the corresponding type.
translateTypeExp :: TypeExp ùî≤ -> Type ùî≤
translateTypeExp (LocationTypeExp _ œÑ) = translateTypeExp œÑ
translateTypeExp (VariableTypeExp x) = VariableType x
translateTypeExp (ApplyTypeExp œÑ‚ÇÅ œÑ‚ÇÇ) = ApplyType (translateTypeExp œÑ‚ÇÅ)
                                                  (translateTypeExp œÑ‚ÇÇ)
translateTypeExp FunctionTypeExp = FunctionType

--------------------------------------------------------------------------------
-- Term expressions

-- |
-- Check that a term has the given expected type. The given type will first be
-- Skolemized.
checkTermExp :: Interface -> Type 0 -> TermExp -> Check ()
checkTermExp i œÑ e =
  runInfer $ do

    -- Check that term has expected type.
    let Œ≥ = Œì { Œ≥Values = interfaceValues i }
    œÑ' <- skolemize œÑ
    œÑe <- inferTermExp Œ≥ e
    constrain $ œÑ' :~: œÑe

    -- Solve constraints.
    use _œÉConstraints >>= traverse_ solve

inferTermExp :: Œì -> TermExp -> Infer (Type 0)

inferTermExp Œ≥ (LocationTermExp l e) =
  withLocation l (inferTermExp Œ≥ e)

inferTermExp Œ≥ (VariableTermExp x) =
  case Œ≥ ^? _Œ≥Values . ix x of
    Nothing -> throwError (UnknownValue x)
    Just œÑ -> instantiate œÑ

inferTermExp Œ≥ (LambdaTermExp x e) = do
  œÑx <- UnknownType <$> freshUnknown

  let Œ≥e = Œ≥ & _Œ≥Values . at x ?~ œÑx
  œÑe <- inferTermExp Œ≥e e

  let œÑŒª = ApplyType (ApplyType FunctionType œÑx) œÑe

  pure œÑŒª

inferTermExp Œ≥ (ApplyTermExp e‚ÇÅ e‚ÇÇ) = do
  œÑe‚ÇÅ <- inferTermExp Œ≥ e‚ÇÅ
  œÑe‚ÇÇ <- inferTermExp Œ≥ e‚ÇÇ

  œÑr <- UnknownType <$> freshUnknown
  constrain $ œÑe‚ÇÅ :~: ApplyType (ApplyType FunctionType œÑe‚ÇÇ) œÑr

  pure œÑr

--------------------------------------------------------------------------------
-- Inference

type Infer =
  StateT Œ£ Check

runInfer :: Infer a -> Check a
runInfer a =
  let œÉ = Œ£ { œÉNext = 0, œÉConstraints = [], œÉResolveds = Map.empty } in
  evalStateT a œÉ

--------------------------------------------------------------------------------
-- Solving

solve :: Constraint -> Infer ()
solve (œÑ‚ÇÅ :~: œÑ‚ÇÇ) = unify œÑ‚ÇÅ œÑ‚ÇÇ

unify :: KnownNat ùî≤ => Type ùî≤ -> Type ùî≤ -> Infer ()
unify = \œÑ‚ÇÅ œÑ‚ÇÇ -> do
  œÑ‚ÇÅ' <- purge œÑ‚ÇÅ
  œÑ‚ÇÇ' <- purge œÑ‚ÇÇ
  unify' œÑ‚ÇÅ' œÑ‚ÇÇ'

unify' :: KnownNat ùî≤ => Type ùî≤ -> Type ùî≤ -> Infer ()

unify' (UnknownType œÖ‚ÇÅ) (UnknownType œÖ‚ÇÇ) | œÖ‚ÇÅ == œÖ‚ÇÇ = pure ()
unify' (UnknownType œÖ) œÑ = resolve œÖ œÑ
unify' œÑ (UnknownType œÖ) = resolve œÖ œÑ

unify' (SkolemType s‚ÇÅ) (SkolemType s‚ÇÇ) | s‚ÇÅ == s‚ÇÇ = pure ()
unify' œÑ‚ÇÅ@SkolemType{} œÑ‚ÇÇ = cannotUnify œÑ‚ÇÅ œÑ‚ÇÇ
unify' œÑ‚ÇÇ œÑ‚ÇÅ@SkolemType{} = cannotUnify œÑ‚ÇÅ œÑ‚ÇÇ

unify' (VariableType x‚ÇÅ) (VariableType x‚ÇÇ) | x‚ÇÅ == x‚ÇÇ = pure ()
unify' œÑ‚ÇÅ@VariableType{} œÑ‚ÇÇ = cannotUnify œÑ‚ÇÅ œÑ‚ÇÇ
unify' œÑ‚ÇÇ œÑ‚ÇÅ@VariableType{} = cannotUnify œÑ‚ÇÅ œÑ‚ÇÇ

unify' (ApplyType œÑ‚ÇÅ œÑ‚ÇÇ) (ApplyType œÑ‚ÇÉ œÑ‚ÇÑ) = do { unify œÑ‚ÇÅ œÑ‚ÇÉ; unify œÑ‚ÇÇ œÑ‚ÇÑ }
unify' œÑ‚ÇÅ@ApplyType{} œÑ‚ÇÇ = cannotUnify œÑ‚ÇÅ œÑ‚ÇÇ
unify' œÑ‚ÇÅ œÑ‚ÇÇ@ApplyType{} = cannotUnify œÑ‚ÇÅ œÑ‚ÇÇ

unify' FunctionType FunctionType = pure ()

cannotUnify :: KnownNat ùî≤ => Type ùî≤ -> Type ùî≤ -> Infer a
cannotUnify œÑ‚ÇÅ œÑ‚ÇÇ = do
  œÑ‚ÇÅ' <- purge' œÑ‚ÇÅ
  œÑ‚ÇÇ' <- purge' œÑ‚ÇÇ
  throwError $ CannotUnify œÑ‚ÇÅ' œÑ‚ÇÇ'

--------------------------------------------------------------------------------
-- Environment

newtype Œì :: * where
  Œì
    :: { Œ≥Values :: Map Name (Type 0) }
    -> Œì

--------------------------------------------------------------------------------
-- State

data Œ£ :: * where
  Œ£
    :: { œÉNext        :: Word64
       , œÉConstraints :: [Constraint]
       , œÉResolveds   :: Map Unknown Type' }
    -> Œ£

freshUnknown :: Infer Unknown
freshUnknown = fmap Unknown $ _œÉNext <<+= 1

freshSkolem :: Infer Skolem
freshSkolem = fmap Skolem $ _œÉNext <<+= 1

instantiate :: Type ùî≤ -> Infer (Type ùî≤)
instantiate = instantemize (UnknownType <$> freshUnknown)

skolemize :: Type ùî≤ -> Infer (Type ùî≤)
skolemize = instantemize (SkolemType <$> freshSkolem)

-- |
-- Shared implementation of 'instantiate' and 'skolemize'.
instantemize :: Infer (Type ùî≤) -> Type ùî≤ -> Infer (Type ùî≤)
instantemize _ œÑ@UnknownType{}   = pure œÑ
instantemize _ œÑ@SkolemType{}    = pure œÑ
instantemize _ œÑ@VariableType{}  = pure œÑ -- TODO: Substitute.
instantemize œÜ (ApplyType œÑ‚ÇÅ œÑ‚ÇÇ) = ApplyType <$> instantemize œÜ œÑ‚ÇÅ
                                             <*> instantemize œÜ œÑ‚ÇÇ
instantemize _ œÑ@FunctionType    = pure œÑ

constrain :: Constraint -> Infer ()
constrain = (_œÉConstraints %=) . (:)

-- |
-- Resolve an unknown.
resolve :: KnownNat ùî≤ => Unknown -> Type ùî≤ -> Infer ()
resolve œÖ œÑ = _œÉResolveds . at œÖ ?= hideUniverse œÑ

-- |
-- Follow resolveds recursively until an unresolved unknown or a known type is
-- found. Will fail if the universe of the result is different from the
-- universe of the input, but this shouldn't happen.
purge :: forall ùî≤. KnownNat ùî≤ => Type ùî≤ -> Infer (Type ùî≤)
purge œÑ@(UnknownType œÖ) =
  use (_œÉResolveds . at œÖ) >>= do
    maybe (pure œÑ) $
      maybe (throwError PurgeInvalidUniverse) purge .
        inUniverse @ùî≤
purge œÑ = pure œÑ

-- |
-- Like 'purge', but purge the entire tree instead of just the root.
purge' :: KnownNat ùî≤ => Type ùî≤ -> Infer (Type ùî≤)
purge' œÑ =
  purge œÑ >>= \case
    œÑ'@UnknownType{}  -> pure œÑ'
    œÑ'@SkolemType{}   -> pure œÑ'
    œÑ'@VariableType{} -> pure œÑ'
    ApplyType œÑ'‚ÇÅ œÑ'‚ÇÇ -> ApplyType <$> purge' œÑ'‚ÇÅ <*> purge' œÑ'‚ÇÇ
    œÑ'@FunctionType   -> pure œÑ'

--------------------------------------------------------------------------------
-- Errors

type Œ® = (Location, Œ®')

data Œ®' :: * where
  UnknownValue :: Name -> Œ®'
  CannotUnify :: Type ùî≤ -> Type ùî≤ -> Œ®'
  PurgeInvalidUniverse :: Œ®'
deriving stock instance Show Œ®'

throwError :: (MonadReader Location f, MonadError Œ® f) => Œ®' -> f a
throwError œà = do
  l <- Reader.ask
  Error.throwError (l, œà)

--------------------------------------------------------------------------------
-- Optics

_Œ≥Values :: Lens' Œì (Map Name (Type 0))
_Œ≥Values = lens Œ≥Values (\s a -> s { Œ≥Values = a })

_œÉNext :: Lens' Œ£ Word64
_œÉNext = lens œÉNext (\s a -> s { œÉNext = a })

_œÉConstraints :: Lens' Œ£ [Constraint]
_œÉConstraints = lens œÉConstraints (\s a -> s { œÉConstraints = a })

_œÉResolveds :: Lens' Œ£ (Map Unknown Type')
_œÉResolveds = lens œÉResolveds (\s a -> s { œÉResolveds = a })
